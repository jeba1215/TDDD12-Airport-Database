4c:
	By encrypting the stored data hackers won't be able
	to determine what is stored even if they gain access
	to the data.


4e:	
	Less data is transfered betwen the user and
	the server if the code is stored on the server
	and only invoked from the user.

	By storing the code on the server it can't be
	modified or read by the user before execution 
	which grants an additional level of security.

	It's much more modular to use stored procedures.
	When a change in the database needs to be made
	you restructure and modify your existing procedures
	and then save the changes and it will work on all
	end user systems without needing to change anything there.


9b:	
	No it isn't because the data hasn't been commited yet.


9c:	
	The terminal freezes and after a while exits due to lock timeout. This
	is because the A has a lock on the table entries that hasn't been commited yet.
	So when b tries to update it by acquiring the lock it has to wait.

9d: 
	If the reservation is correct and I want it carried out then it has
	to be commited so other processes can access the data modified by
	the current process. If the reservation is incorrect we want to revert
	to the state before the reservation was executed. This can be done with a
	checkpoint to represent an earlier valid state of the database.


10a:
	If there are 8 seats left on flight A and two seassions tries to book
	5 seats each at the exakt same time then both will pass the seat check. 
	Before the other has the chance to subtract it's passenger amount from
	unpaid seats on the flight.

		if checkSeats(flight) > _seats then

		update Flight
						set unpaid_seats = (select unpaid_seats - ifnull(( 
												select num_of_passengers from Booking
												where Flight.id = Booking.flight), 0)
												);

	So both will subract 5 seats each from the flight resulting in the flight
	having -2 seats available. 


10c:
	By locking all the tables with the proper access level (read/write) before executing any
	code we can be sure that there won't be any parallel execution in critical areas.
	For example in the case described in 10a, the process will have aquired a lock for Flight
	so the other session won't be able to access the Fligt table until the first table unlocks
	that table.

































